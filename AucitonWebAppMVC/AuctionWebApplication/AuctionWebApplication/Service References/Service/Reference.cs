//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication.Service {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Account", Namespace="http://schemas.datacontract.org/2004/07/Core")]
    [System.SerializableAttribute()]
    public partial class Account : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SaltField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Fname {
            get {
                return this.FnameField;
            }
            set {
                if ((object.ReferenceEquals(this.FnameField, value) != true)) {
                    this.FnameField = value;
                    this.RaisePropertyChanged("Fname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lname {
            get {
                return this.LnameField;
            }
            set {
                if ((object.ReferenceEquals(this.LnameField, value) != true)) {
                    this.LnameField = value;
                    this.RaisePropertyChanged("Lname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Salt {
            get {
                return this.SaltField;
            }
            set {
                if ((object.ReferenceEquals(this.SaltField, value) != true)) {
                    this.SaltField = value;
                    this.RaisePropertyChanged("Salt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Category", Namespace="http://schemas.datacontract.org/2004/07/Core")]
    [System.SerializableAttribute()]
    public partial class Category : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebApplication.Service.Product[] ProductsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebApplication.Service.Product[] Products {
            get {
                return this.ProductsField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductsField, value) != true)) {
                    this.ProductsField = value;
                    this.RaisePropertyChanged("Products");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Product", Namespace="http://schemas.datacontract.org/2004/07/Core")]
    [System.SerializableAttribute()]
    public partial class Product : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebApplication.Service.Category CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PictureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] RowVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double StockField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebApplication.Service.Category Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Picture {
            get {
                return this.PictureField;
            }
            set {
                if ((object.ReferenceEquals(this.PictureField, value) != true)) {
                    this.PictureField = value;
                    this.RaisePropertyChanged("Picture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] RowVersion {
            get {
                return this.RowVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.RowVersionField, value) != true)) {
                    this.RowVersionField = value;
                    this.RaisePropertyChanged("RowVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Stock {
            get {
                return this.StockField;
            }
            set {
                if ((this.StockField.Equals(value) != true)) {
                    this.StockField = value;
                    this.RaisePropertyChanged("Stock");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IProjectService")]
    public interface IProjectService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/LogError", ReplyAction="http://tempuri.org/IProjectService/LogErrorResponse")]
        void LogError(System.Exception e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/LogError", ReplyAction="http://tempuri.org/IProjectService/LogErrorResponse")]
        System.Threading.Tasks.Task LogErrorAsync(System.Exception e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetAccountById", ReplyAction="http://tempuri.org/IProjectService/GetAccountByIdResponse")]
        WebApplication.Service.Account GetAccountById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetAccountById", ReplyAction="http://tempuri.org/IProjectService/GetAccountByIdResponse")]
        System.Threading.Tasks.Task<WebApplication.Service.Account> GetAccountByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/HashAndSaltPassword", ReplyAction="http://tempuri.org/IProjectService/HashAndSaltPasswordResponse")]
        WebApplication.Service.Account HashAndSaltPassword(WebApplication.Service.Account acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/HashAndSaltPassword", ReplyAction="http://tempuri.org/IProjectService/HashAndSaltPasswordResponse")]
        System.Threading.Tasks.Task<WebApplication.Service.Account> HashAndSaltPasswordAsync(WebApplication.Service.Account acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/Login", ReplyAction="http://tempuri.org/IProjectService/LoginResponse")]
        bool Login(WebApplication.Service.Account acc, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/Login", ReplyAction="http://tempuri.org/IProjectService/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(WebApplication.Service.Account acc, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/AddAccount", ReplyAction="http://tempuri.org/IProjectService/AddAccountResponse")]
        int AddAccount(WebApplication.Service.Account Account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/AddAccount", ReplyAction="http://tempuri.org/IProjectService/AddAccountResponse")]
        System.Threading.Tasks.Task<int> AddAccountAsync(WebApplication.Service.Account Account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetAllAccounts", ReplyAction="http://tempuri.org/IProjectService/GetAllAccountsResponse")]
        WebApplication.Service.Account[] GetAllAccounts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetAllAccounts", ReplyAction="http://tempuri.org/IProjectService/GetAllAccountsResponse")]
        System.Threading.Tasks.Task<WebApplication.Service.Account[]> GetAllAccountsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/RemoveAccount", ReplyAction="http://tempuri.org/IProjectService/RemoveAccountResponse")]
        void RemoveAccount(WebApplication.Service.Account Account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/RemoveAccount", ReplyAction="http://tempuri.org/IProjectService/RemoveAccountResponse")]
        System.Threading.Tasks.Task RemoveAccountAsync(WebApplication.Service.Account Account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/RemoveAccountById", ReplyAction="http://tempuri.org/IProjectService/RemoveAccountByIdResponse")]
        int RemoveAccountById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/RemoveAccountById", ReplyAction="http://tempuri.org/IProjectService/RemoveAccountByIdResponse")]
        System.Threading.Tasks.Task<int> RemoveAccountByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/UpdateAccount", ReplyAction="http://tempuri.org/IProjectService/UpdateAccountResponse")]
        int UpdateAccount(WebApplication.Service.Account Account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/UpdateAccount", ReplyAction="http://tempuri.org/IProjectService/UpdateAccountResponse")]
        System.Threading.Tasks.Task<int> UpdateAccountAsync(WebApplication.Service.Account Account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetAccountByUsername", ReplyAction="http://tempuri.org/IProjectService/GetAccountByUsernameResponse")]
        WebApplication.Service.Account GetAccountByUsername(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetAccountByUsername", ReplyAction="http://tempuri.org/IProjectService/GetAccountByUsernameResponse")]
        System.Threading.Tasks.Task<WebApplication.Service.Account> GetAccountByUsernameAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetAccountByEmail", ReplyAction="http://tempuri.org/IProjectService/GetAccountByEmailResponse")]
        WebApplication.Service.Account GetAccountByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetAccountByEmail", ReplyAction="http://tempuri.org/IProjectService/GetAccountByEmailResponse")]
        System.Threading.Tasks.Task<WebApplication.Service.Account> GetAccountByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetAccountWithObjects", ReplyAction="http://tempuri.org/IProjectService/GetAccountWithObjectsResponse")]
        WebApplication.Service.Account GetAccountWithObjects(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetAccountWithObjects", ReplyAction="http://tempuri.org/IProjectService/GetAccountWithObjectsResponse")]
        System.Threading.Tasks.Task<WebApplication.Service.Account> GetAccountWithObjectsAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetCategorytById", ReplyAction="http://tempuri.org/IProjectService/GetCategorytByIdResponse")]
        WebApplication.Service.Category GetCategorytById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetCategorytById", ReplyAction="http://tempuri.org/IProjectService/GetCategorytByIdResponse")]
        System.Threading.Tasks.Task<WebApplication.Service.Category> GetCategorytByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/AddCategory", ReplyAction="http://tempuri.org/IProjectService/AddCategoryResponse")]
        int AddCategory(WebApplication.Service.Category Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/AddCategory", ReplyAction="http://tempuri.org/IProjectService/AddCategoryResponse")]
        System.Threading.Tasks.Task<int> AddCategoryAsync(WebApplication.Service.Category Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetAllCategories", ReplyAction="http://tempuri.org/IProjectService/GetAllCategoriesResponse")]
        WebApplication.Service.Category[] GetAllCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetAllCategories", ReplyAction="http://tempuri.org/IProjectService/GetAllCategoriesResponse")]
        System.Threading.Tasks.Task<WebApplication.Service.Category[]> GetAllCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/RemoveCategory", ReplyAction="http://tempuri.org/IProjectService/RemoveCategoryResponse")]
        void RemoveCategory(WebApplication.Service.Category Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/RemoveCategory", ReplyAction="http://tempuri.org/IProjectService/RemoveCategoryResponse")]
        System.Threading.Tasks.Task RemoveCategoryAsync(WebApplication.Service.Category Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/RemoveCategoryById", ReplyAction="http://tempuri.org/IProjectService/RemoveCategoryByIdResponse")]
        int RemoveCategoryById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/RemoveCategoryById", ReplyAction="http://tempuri.org/IProjectService/RemoveCategoryByIdResponse")]
        System.Threading.Tasks.Task<int> RemoveCategoryByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/UpdateCategory", ReplyAction="http://tempuri.org/IProjectService/UpdateCategoryResponse")]
        int UpdateCategory(WebApplication.Service.Category Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/UpdateCategory", ReplyAction="http://tempuri.org/IProjectService/UpdateCategoryResponse")]
        System.Threading.Tasks.Task<int> UpdateCategoryAsync(WebApplication.Service.Category Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetCategoryByName", ReplyAction="http://tempuri.org/IProjectService/GetCategoryByNameResponse")]
        WebApplication.Service.Category GetCategoryByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetCategoryByName", ReplyAction="http://tempuri.org/IProjectService/GetCategoryByNameResponse")]
        System.Threading.Tasks.Task<WebApplication.Service.Category> GetCategoryByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/RemoveCategoryByName", ReplyAction="http://tempuri.org/IProjectService/RemoveCategoryByNameResponse")]
        int RemoveCategoryByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/RemoveCategoryByName", ReplyAction="http://tempuri.org/IProjectService/RemoveCategoryByNameResponse")]
        System.Threading.Tasks.Task<int> RemoveCategoryByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetCategoryWithObjects", ReplyAction="http://tempuri.org/IProjectService/GetCategoryWithObjectsResponse")]
        WebApplication.Service.Category GetCategoryWithObjects(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetCategoryWithObjects", ReplyAction="http://tempuri.org/IProjectService/GetCategoryWithObjectsResponse")]
        System.Threading.Tasks.Task<WebApplication.Service.Category> GetCategoryWithObjectsAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProductById", ReplyAction="http://tempuri.org/IProjectService/GetProductByIdResponse")]
        WebApplication.Service.Product GetProductById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProductById", ReplyAction="http://tempuri.org/IProjectService/GetProductByIdResponse")]
        System.Threading.Tasks.Task<WebApplication.Service.Product> GetProductByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetAllProductsInCategory", ReplyAction="http://tempuri.org/IProjectService/GetAllProductsInCategoryResponse")]
        WebApplication.Service.Product[] GetAllProductsInCategory(int CategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetAllProductsInCategory", ReplyAction="http://tempuri.org/IProjectService/GetAllProductsInCategoryResponse")]
        System.Threading.Tasks.Task<WebApplication.Service.Product[]> GetAllProductsInCategoryAsync(int CategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/AddProduct", ReplyAction="http://tempuri.org/IProjectService/AddProductResponse")]
        int AddProduct(WebApplication.Service.Product Product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/AddProduct", ReplyAction="http://tempuri.org/IProjectService/AddProductResponse")]
        System.Threading.Tasks.Task<int> AddProductAsync(WebApplication.Service.Product Product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetAllProducts", ReplyAction="http://tempuri.org/IProjectService/GetAllProductsResponse")]
        WebApplication.Service.Product[] GetAllProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetAllProducts", ReplyAction="http://tempuri.org/IProjectService/GetAllProductsResponse")]
        System.Threading.Tasks.Task<WebApplication.Service.Product[]> GetAllProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/RemoveProduct", ReplyAction="http://tempuri.org/IProjectService/RemoveProductResponse")]
        void RemoveProduct(WebApplication.Service.Product Product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/RemoveProduct", ReplyAction="http://tempuri.org/IProjectService/RemoveProductResponse")]
        System.Threading.Tasks.Task RemoveProductAsync(WebApplication.Service.Product Product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/RemoveProductById", ReplyAction="http://tempuri.org/IProjectService/RemoveProductByIdResponse")]
        int RemoveProductById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/RemoveProductById", ReplyAction="http://tempuri.org/IProjectService/RemoveProductByIdResponse")]
        System.Threading.Tasks.Task<int> RemoveProductByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/UpdateProduct", ReplyAction="http://tempuri.org/IProjectService/UpdateProductResponse")]
        int UpdateProduct(WebApplication.Service.Product Product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/UpdateProduct", ReplyAction="http://tempuri.org/IProjectService/UpdateProductResponse")]
        System.Threading.Tasks.Task<int> UpdateProductAsync(WebApplication.Service.Product Product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/FindProductsWithPriceMoreThan", ReplyAction="http://tempuri.org/IProjectService/FindProductsWithPriceMoreThanResponse")]
        WebApplication.Service.Product[] FindProductsWithPriceMoreThan(double price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/FindProductsWithPriceMoreThan", ReplyAction="http://tempuri.org/IProjectService/FindProductsWithPriceMoreThanResponse")]
        System.Threading.Tasks.Task<WebApplication.Service.Product[]> FindProductsWithPriceMoreThanAsync(double price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProductsWithName", ReplyAction="http://tempuri.org/IProjectService/GetProductsWithNameResponse")]
        WebApplication.Service.Product[] GetProductsWithName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProductsWithName", ReplyAction="http://tempuri.org/IProjectService/GetProductsWithNameResponse")]
        System.Threading.Tasks.Task<WebApplication.Service.Product[]> GetProductsWithNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProductsWithDescription", ReplyAction="http://tempuri.org/IProjectService/GetProductsWithDescriptionResponse")]
        WebApplication.Service.Product[] GetProductsWithDescription(string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProductsWithDescription", ReplyAction="http://tempuri.org/IProjectService/GetProductsWithDescriptionResponse")]
        System.Threading.Tasks.Task<WebApplication.Service.Product[]> GetProductsWithDescriptionAsync(string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/FindProductsWithPriceLessThan", ReplyAction="http://tempuri.org/IProjectService/FindProductsWithPriceLessThanResponse")]
        WebApplication.Service.Product[] FindProductsWithPriceLessThan(double price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/FindProductsWithPriceLessThan", ReplyAction="http://tempuri.org/IProjectService/FindProductsWithPriceLessThanResponse")]
        System.Threading.Tasks.Task<WebApplication.Service.Product[]> FindProductsWithPriceLessThanAsync(double price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProductWithObjects", ReplyAction="http://tempuri.org/IProjectService/GetProductWithObjectsResponse")]
        WebApplication.Service.Product GetProductWithObjects(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProductWithObjects", ReplyAction="http://tempuri.org/IProjectService/GetProductWithObjectsResponse")]
        System.Threading.Tasks.Task<WebApplication.Service.Product> GetProductWithObjectsAsync(int Id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProjectServiceChannel : WebApplication.Service.IProjectService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProjectServiceClient : System.ServiceModel.ClientBase<WebApplication.Service.IProjectService>, WebApplication.Service.IProjectService {
        
        public ProjectServiceClient() {
        }
        
        public ProjectServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProjectServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProjectServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProjectServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void LogError(System.Exception e) {
            base.Channel.LogError(e);
        }
        
        public System.Threading.Tasks.Task LogErrorAsync(System.Exception e) {
            return base.Channel.LogErrorAsync(e);
        }
        
        public WebApplication.Service.Account GetAccountById(int Id) {
            return base.Channel.GetAccountById(Id);
        }
        
        public System.Threading.Tasks.Task<WebApplication.Service.Account> GetAccountByIdAsync(int Id) {
            return base.Channel.GetAccountByIdAsync(Id);
        }
        
        public WebApplication.Service.Account HashAndSaltPassword(WebApplication.Service.Account acc) {
            return base.Channel.HashAndSaltPassword(acc);
        }
        
        public System.Threading.Tasks.Task<WebApplication.Service.Account> HashAndSaltPasswordAsync(WebApplication.Service.Account acc) {
            return base.Channel.HashAndSaltPasswordAsync(acc);
        }
        
        public bool Login(WebApplication.Service.Account acc, string password) {
            return base.Channel.Login(acc, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(WebApplication.Service.Account acc, string password) {
            return base.Channel.LoginAsync(acc, password);
        }
        
        public int AddAccount(WebApplication.Service.Account Account) {
            return base.Channel.AddAccount(Account);
        }
        
        public System.Threading.Tasks.Task<int> AddAccountAsync(WebApplication.Service.Account Account) {
            return base.Channel.AddAccountAsync(Account);
        }
        
        public WebApplication.Service.Account[] GetAllAccounts() {
            return base.Channel.GetAllAccounts();
        }
        
        public System.Threading.Tasks.Task<WebApplication.Service.Account[]> GetAllAccountsAsync() {
            return base.Channel.GetAllAccountsAsync();
        }
        
        public void RemoveAccount(WebApplication.Service.Account Account) {
            base.Channel.RemoveAccount(Account);
        }
        
        public System.Threading.Tasks.Task RemoveAccountAsync(WebApplication.Service.Account Account) {
            return base.Channel.RemoveAccountAsync(Account);
        }
        
        public int RemoveAccountById(int Id) {
            return base.Channel.RemoveAccountById(Id);
        }
        
        public System.Threading.Tasks.Task<int> RemoveAccountByIdAsync(int Id) {
            return base.Channel.RemoveAccountByIdAsync(Id);
        }
        
        public int UpdateAccount(WebApplication.Service.Account Account) {
            return base.Channel.UpdateAccount(Account);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAccountAsync(WebApplication.Service.Account Account) {
            return base.Channel.UpdateAccountAsync(Account);
        }
        
        public WebApplication.Service.Account GetAccountByUsername(string username) {
            return base.Channel.GetAccountByUsername(username);
        }
        
        public System.Threading.Tasks.Task<WebApplication.Service.Account> GetAccountByUsernameAsync(string username) {
            return base.Channel.GetAccountByUsernameAsync(username);
        }
        
        public WebApplication.Service.Account GetAccountByEmail(string email) {
            return base.Channel.GetAccountByEmail(email);
        }
        
        public System.Threading.Tasks.Task<WebApplication.Service.Account> GetAccountByEmailAsync(string email) {
            return base.Channel.GetAccountByEmailAsync(email);
        }
        
        public WebApplication.Service.Account GetAccountWithObjects(int Id) {
            return base.Channel.GetAccountWithObjects(Id);
        }
        
        public System.Threading.Tasks.Task<WebApplication.Service.Account> GetAccountWithObjectsAsync(int Id) {
            return base.Channel.GetAccountWithObjectsAsync(Id);
        }
        
        public WebApplication.Service.Category GetCategorytById(int Id) {
            return base.Channel.GetCategorytById(Id);
        }
        
        public System.Threading.Tasks.Task<WebApplication.Service.Category> GetCategorytByIdAsync(int Id) {
            return base.Channel.GetCategorytByIdAsync(Id);
        }
        
        public int AddCategory(WebApplication.Service.Category Category) {
            return base.Channel.AddCategory(Category);
        }
        
        public System.Threading.Tasks.Task<int> AddCategoryAsync(WebApplication.Service.Category Category) {
            return base.Channel.AddCategoryAsync(Category);
        }
        
        public WebApplication.Service.Category[] GetAllCategories() {
            return base.Channel.GetAllCategories();
        }
        
        public System.Threading.Tasks.Task<WebApplication.Service.Category[]> GetAllCategoriesAsync() {
            return base.Channel.GetAllCategoriesAsync();
        }
        
        public void RemoveCategory(WebApplication.Service.Category Category) {
            base.Channel.RemoveCategory(Category);
        }
        
        public System.Threading.Tasks.Task RemoveCategoryAsync(WebApplication.Service.Category Category) {
            return base.Channel.RemoveCategoryAsync(Category);
        }
        
        public int RemoveCategoryById(int Id) {
            return base.Channel.RemoveCategoryById(Id);
        }
        
        public System.Threading.Tasks.Task<int> RemoveCategoryByIdAsync(int Id) {
            return base.Channel.RemoveCategoryByIdAsync(Id);
        }
        
        public int UpdateCategory(WebApplication.Service.Category Category) {
            return base.Channel.UpdateCategory(Category);
        }
        
        public System.Threading.Tasks.Task<int> UpdateCategoryAsync(WebApplication.Service.Category Category) {
            return base.Channel.UpdateCategoryAsync(Category);
        }
        
        public WebApplication.Service.Category GetCategoryByName(string name) {
            return base.Channel.GetCategoryByName(name);
        }
        
        public System.Threading.Tasks.Task<WebApplication.Service.Category> GetCategoryByNameAsync(string name) {
            return base.Channel.GetCategoryByNameAsync(name);
        }
        
        public int RemoveCategoryByName(string name) {
            return base.Channel.RemoveCategoryByName(name);
        }
        
        public System.Threading.Tasks.Task<int> RemoveCategoryByNameAsync(string name) {
            return base.Channel.RemoveCategoryByNameAsync(name);
        }
        
        public WebApplication.Service.Category GetCategoryWithObjects(int Id) {
            return base.Channel.GetCategoryWithObjects(Id);
        }
        
        public System.Threading.Tasks.Task<WebApplication.Service.Category> GetCategoryWithObjectsAsync(int Id) {
            return base.Channel.GetCategoryWithObjectsAsync(Id);
        }
        
        public WebApplication.Service.Product GetProductById(int Id) {
            return base.Channel.GetProductById(Id);
        }
        
        public System.Threading.Tasks.Task<WebApplication.Service.Product> GetProductByIdAsync(int Id) {
            return base.Channel.GetProductByIdAsync(Id);
        }
        
        public WebApplication.Service.Product[] GetAllProductsInCategory(int CategoryId) {
            return base.Channel.GetAllProductsInCategory(CategoryId);
        }
        
        public System.Threading.Tasks.Task<WebApplication.Service.Product[]> GetAllProductsInCategoryAsync(int CategoryId) {
            return base.Channel.GetAllProductsInCategoryAsync(CategoryId);
        }
        
        public int AddProduct(WebApplication.Service.Product Product) {
            return base.Channel.AddProduct(Product);
        }
        
        public System.Threading.Tasks.Task<int> AddProductAsync(WebApplication.Service.Product Product) {
            return base.Channel.AddProductAsync(Product);
        }
        
        public WebApplication.Service.Product[] GetAllProducts() {
            return base.Channel.GetAllProducts();
        }
        
        public System.Threading.Tasks.Task<WebApplication.Service.Product[]> GetAllProductsAsync() {
            return base.Channel.GetAllProductsAsync();
        }
        
        public void RemoveProduct(WebApplication.Service.Product Product) {
            base.Channel.RemoveProduct(Product);
        }
        
        public System.Threading.Tasks.Task RemoveProductAsync(WebApplication.Service.Product Product) {
            return base.Channel.RemoveProductAsync(Product);
        }
        
        public int RemoveProductById(int Id) {
            return base.Channel.RemoveProductById(Id);
        }
        
        public System.Threading.Tasks.Task<int> RemoveProductByIdAsync(int Id) {
            return base.Channel.RemoveProductByIdAsync(Id);
        }
        
        public int UpdateProduct(WebApplication.Service.Product Product) {
            return base.Channel.UpdateProduct(Product);
        }
        
        public System.Threading.Tasks.Task<int> UpdateProductAsync(WebApplication.Service.Product Product) {
            return base.Channel.UpdateProductAsync(Product);
        }
        
        public WebApplication.Service.Product[] FindProductsWithPriceMoreThan(double price) {
            return base.Channel.FindProductsWithPriceMoreThan(price);
        }
        
        public System.Threading.Tasks.Task<WebApplication.Service.Product[]> FindProductsWithPriceMoreThanAsync(double price) {
            return base.Channel.FindProductsWithPriceMoreThanAsync(price);
        }
        
        public WebApplication.Service.Product[] GetProductsWithName(string name) {
            return base.Channel.GetProductsWithName(name);
        }
        
        public System.Threading.Tasks.Task<WebApplication.Service.Product[]> GetProductsWithNameAsync(string name) {
            return base.Channel.GetProductsWithNameAsync(name);
        }
        
        public WebApplication.Service.Product[] GetProductsWithDescription(string description) {
            return base.Channel.GetProductsWithDescription(description);
        }
        
        public System.Threading.Tasks.Task<WebApplication.Service.Product[]> GetProductsWithDescriptionAsync(string description) {
            return base.Channel.GetProductsWithDescriptionAsync(description);
        }
        
        public WebApplication.Service.Product[] FindProductsWithPriceLessThan(double price) {
            return base.Channel.FindProductsWithPriceLessThan(price);
        }
        
        public System.Threading.Tasks.Task<WebApplication.Service.Product[]> FindProductsWithPriceLessThanAsync(double price) {
            return base.Channel.FindProductsWithPriceLessThanAsync(price);
        }
        
        public WebApplication.Service.Product GetProductWithObjects(int Id) {
            return base.Channel.GetProductWithObjects(Id);
        }
        
        public System.Threading.Tasks.Task<WebApplication.Service.Product> GetProductWithObjectsAsync(int Id) {
            return base.Channel.GetProductWithObjectsAsync(Id);
        }
    }
}
